import aiogram
from aiogram.fsm.context import FSMContext
from app.bot.handlers.base import BaseHandler
from app.bot.states import AuthState
from app.utils.auth import TelegramAuthService
from app.exceptions.telegram_exceptions import TelegramAuthError
from app.exceptions.link_tg_exceptions import (
    TelegramLinkError,
    IncorrectEmailError,
    IncorrectUserInputError,
)
from app.utils.logger import logger

class FirstStepTelegramLinkHandler(BaseHandler):

    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –°–≤—è–∑—ã–≤–∞–Ω–∏–µ Tg-–∞–∫–∫–∞—É–Ω—Ç–∞  {event.from_user.id} –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è web-—Å–∏—Å—Ç–µ–º—ã")
        logger.debug(f"[{self.__class__.__name__}] –ó–∞–ø—Ä–æ—Å e-mail –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        await state.set_state(AuthState.waiting_for_email)
        await state.update_data(chain_step=1)

        text = "üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email (example@gmail.com):"
        if isinstance(event, aiogram.types.CallbackQuery):
            await event.message.edit_text(text)
        elif isinstance(event, aiogram.types.Message):
            await event.answer(text)

        return False


class TakingEmaiHandler(BaseHandler):

    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –ü–æ–ª—É—á–µ–Ω–∏–µ e-mail –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        try:
            if not isinstance(event.text, str):
                raise IncorrectUserInputError()

            email = event.text.strip()

            if "@" not in email or "." not in email:
                raise IncorrectEmailError()

            await state.update_data(email=email)
            return await super().handle(event, state, context)

        except TelegramLinkError as e:
            logger.warning(f"[{self.__class__.__name__}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e.message} | {event.from_user.id}")
            await event.answer(e.to_user_message())
            return False
        except Exception as e:
            logger.exception(f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ email: {e}")
            await event.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False


class SecondStepTelegramLinkHandler(BaseHandler):

    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –ó–∞–ø—Ä–æ—Å –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        await state.set_state(AuthState.waiting_for_password)
        await state.update_data(chain_step=3)
        await event.answer("üîê –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å (password1!):")
        return False


class TakingPasswordHandler(BaseHandler):

    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        try:
            if not isinstance(event.text, str):
                raise IncorrectUserInputError()
            password = event.text.strip()
            await state.update_data(password=password)
            return await super().handle(event, state, context)

        except TelegramLinkError as e:
            logger.warning(f"[{self.__class__.__name__}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e.message} | {event.from_user.id}")
            await event.answer(e.to_user_message())
            return False
        except Exception as e:
            logger.exception(f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞—Ä–æ–ª—è: {e}")
            await event.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False


class TelegramLoginHandler(BaseHandler):

    async def handle(self, event, state, context=None):
        logger.debug(f"[{self.__class__.__name__}] –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        try:
            data = await state.get_data()
            email = data.get("email")
            password = data.get("password")

            auth = TelegramAuthService()
            data, _ = await auth.auth_link_telegram(
                email=email,
                password=password
            )

            data_from_context = await state.get_data()

            if not data_from_context:
                data_from_context = {}

            data_from_context.update({
                "access_token": data["access_token"],
                "refresh_token": data["refresh_token"],
                "user_id": data["user"]["id"]
            })

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ FSMContext
            await state.update_data(data_from_context)
            logger.info(f"[{self.__class__.__name__}] –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: user_id={data_from_context['user_id']}")
            return await super().handle(event, state, data_from_context)

        except TelegramLinkError as e:
            logger.warning(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å Telegram UI: {event.from_user.id}")
            await event.answer(e.to_user_message())
            return False
        except TelegramAuthError as e:
            logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {event.from_user.id}")
            text, markup = e.to_user_message_with_markup()
            await event.answer(text, reply_markup=markup)

            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ü–µ–ø–æ—á–∫–∏
            from app.bot.handlers.auth.link_tg.chain import LinkTelegramChain
            await state.clear()
            first_handler = LinkTelegramChain().get_handler_by_step(0)
            return await first_handler.handle(event, state)
        except Exception as e:
            logger.exception(f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await event.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False



class FSMUpdateHandler(BaseHandler):
    async def handle(self, event, state, context=None):
        logger.debug(f"[{self.__class__.__name__}] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ FSM –¥–∞–Ω–Ω—ã—Ö –¥–ª—è user_id={context['user_id']}")
        await state.set_state("AuthState:authenticated")
        await state.update_data(
            access_token=context["access_token"],
            refresh_token=context["refresh_token"],
            user_id=context["user_id"]
        )
        return await super().handle(event, state, context)


class MakeLinkHandler(BaseHandler):

    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–º –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–∏—Å—Ç–µ–º—ã {event.from_user.id}")

        try:
            data = await state.get_data()
            access_token = data.get("access_token")
            auth = TelegramAuthService()
            user_data, _ = await auth.link_telegram(tg_id=event.from_user.id,
                                               tg_username=event.from_user.username or "",
                                               access_token=access_token)
            return await super().handle(event, state, context)

        except TelegramAuthError as e:
            logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–º –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–∏—Å—Ç–µ–º—ã: {event.from_user.id}")
            text, markup = e.to_user_message_with_markup()
            await event.answer(text, reply_markup=markup)
            return False
        except Exception as e:
            logger.exception(f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–º –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–∏—Å—Ç–µ–º—ã: {e}")
            await event.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False



class SendWelcomeHandler(BaseHandler):
    async def handle(self, event, state, context=None):
        from app.bot.keyboards.main_manu import MainMenuKeyboard
        logger.debug(f"[{self.__class__.__name__}] –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {event.from_user.id}")
        await event.message.edit_text("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
                                      "–¢–µ–ø–µ—Ä—å –≤–∞–º –æ—Ç–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –æ—Å–Ω–æ–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º —Å–∏—Å—Ç–µ–º—ã.\n"
                                      "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞–±–æ—Ç–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n",
                                      reply_markup=MainMenuKeyboard.go_to_main_menu_keyboard())