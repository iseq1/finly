from aiogram.fsm.context import FSMContext
from app.bot.handlers.base import BaseHandler
from app.bot.states import AuthState
from app.utils.auth import TelegramAuthService
from app.exceptions.telegram_exceptions import TelegramAuthError
from app.utils.logger import logger

class FirstStepTelegramLinkHandler(BaseHandler):

    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –°–≤—è–∑—ã–≤–∞–Ω–∏–µ Tg-–∞–∫–∫–∞—É–Ω—Ç–∞  {event.from_user.id} –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è web-—Å–∏—Å—Ç–µ–º—ã")
        logger.debug(f"[{self.__class__.__name__}] –ó–∞–ø—Ä–æ—Å e-mail –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        await state.set_state(AuthState.waiting_for_email)
        await state.update_data(chain_step=1)
        await event.message.edit_text("üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email (example@gmail.com):")
        return False


class TakingEmaiHandler(BaseHandler):

    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –ü–æ–ª—É—á–µ–Ω–∏–µ e-mail –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        try:
            email = event.text.strip()
            if "@" not in email or "." not in email:
                raise IncorrectEmailError('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email')

            await state.update_data(email=email)

            return await super().handle(event, state, context)

        except IncorrectEmailError as e:
            logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è e-mail –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {event.from_user.id} ")
            await event.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
            return False


class SecondStepTelegramLinkHandler(BaseHandler):

    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –ó–∞–ø—Ä–æ—Å –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        await state.set_state(AuthState.waiting_for_password)
        await state.update_data(chain_step=3)
        await event.answer("üîê –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å (password1!):")
        return False


class TakingPasswordHandler(BaseHandler):

    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        try:
            password = event.text.strip()
            await state.update_data(password=password)
            return await super().handle(event, state, context)

        except IncorrectEmailError:
            logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {event.from_user.id} ")
            return False


class TelegramLoginHandler(BaseHandler):

    async def handle(self, event, state, context=None):
        logger.debug(f"[{self.__class__.__name__}] –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        try:
            data = await state.get_data()
            email = data.get("email")
            password = data.get("password")

            auth = TelegramAuthService()
            data, _ = await auth.auth_link_telegram(
                email=email,
                password=password
            )
        except TelegramLoginNotFound:
            logger.warning(f"[{self.__class__.__name__}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {event.from_user.id}")
            await event.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
            return
        except TelegramAuthError:
            logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {event.from_user.id}")
            await event.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
            return

        data_from_context = await state.get_data()

        if not data_from_context:
            data_from_context = {}

        data_from_context.update({
            "access_token": data["access_token"],
            "refresh_token": data["refresh_token"],
            "user_id": data["user"]["id"]
        })

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ FSMContext
        await state.update_data(data_from_context)
        logger.info(f"[{self.__class__.__name__}] –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: user_id={data_from_context['user_id']}")
        return await super().handle(event, state, data_from_context)


class FSMUpdateHandler(BaseHandler):
    async def handle(self, event, state, context=None):
        logger.debug(f"[{self.__class__.__name__}] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ FSM –¥–∞–Ω–Ω—ã—Ö –¥–ª—è user_id={context['user_id']}")
        await state.set_state("AuthState:authenticated")
        await state.update_data(
            access_token=context["access_token"],
            refresh_token=context["refresh_token"],
            user_id=context["user_id"]
        )
        return await super().handle(event, state, context)


class MakeLinkHandler(BaseHandler):

    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–º –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–∏—Å—Ç–µ–º—ã {event.from_user.id}")

        data = await state.get_data()
        access_token = data.get("access_token")

        try:
            auth = TelegramAuthService()
            user_data, _ = await auth.link_telegram(tg_id=event.from_user.id,
                                               tg_username=event.from_user.username or "",
                                               access_token=access_token)
        except TelegramAuthError:
            await event.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∏ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–∏—Å—Ç–µ–º—ã –∏ —Ç–µ–ª–µ–≥—Ä–∞–º–º-–∞–∫–∫–∞—É–Ω—Ç–æ–º.")
            logger.debug(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–º –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–∏—Å—Ç–µ–º—ã {event.from_user.id}")
            return False

        return await super().handle(event, state, context)


class SendWelcomeHandler(BaseHandler):
    async def handle(self, event, state, context=None):
        logger.debug(f"[{self.__class__.__name__}] –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {event.from_user.id}")
        await event.answer("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ –ø—Ä–∏–≤—è–∑–∫–∞ Telegram!")
