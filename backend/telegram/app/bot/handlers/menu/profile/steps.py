from aiogram.fsm.context import FSMContext
from app.bot.handlers.base import BaseHandler
from app.bot.keyboards.profile import ProfileKeyboard
from app.bot.states import EditProfileState
from app.utils.request import RequestManager
from app.exceptions.profile_exceptions import ProfileError, ProfileInfoUnavailable
from app.exceptions.request_exceptions import (
    TokenStorageError, RequestError, )
from app.utils.logger import logger


class GetProfileInfoHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        try:
            request_manager = RequestManager()
            data = await request_manager.make_request(method='GET', url='auth/me', state=state)

            if context is None:
                context = {}
            context['user_data'] = data

            return await super().handle(event, state, context)
        except TokenStorageError as e:
            logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ç–æ–∫–µ–Ω–∞–º–∏: {event.from_user.id}")
            text, markup = e.to_user_message_with_markup()
            await event.message.edit_text(text, reply_markup=markup)
        except RequestError as e:
            logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {event.from_user.id}")
            text, markup = e.to_user_message_with_markup()
            await event.message.edit_text(text, reply_markup=markup)
            return False
        except Exception as e:
            logger.exception(f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await event.message.edit_text("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False

class GetUserCashboxesHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∫—ç—à-–±–æ–∫—Å–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        try:
            request_manager = RequestManager()
            data = await request_manager.make_request(method='GET', url='auth/me/cashboxes', state=state)
            context['user_cashboxes_count'] = len(data)

            return await super().handle(event, state, context)
        except TokenStorageError as e:
            logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ç–æ–∫–µ–Ω–∞–º–∏: {event.from_user.id}")
            text, markup = e.to_user_message_with_markup()
            await event.message.edit_text(text, reply_markup=markup)
        except RequestError as e:
            logger.error(
                f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∫—ç—à-–±–æ–∫—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {event.from_user.id}")
            text, markup = e.to_user_message_with_markup()
            await event.message.edit_text(text, reply_markup=markup)
            return False
        except Exception as e:
            logger.exception(f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await event.message.edit_text("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False


class GetUserBudgetHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –±—é–¥–∂–µ—Ç–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        try:
            request_manager = RequestManager()
            data = await request_manager.make_request(method='GET', url='budget', state=state)
            context['user_budgets_count'] = len(data)
            return await super().handle(event, state, context)
        except TokenStorageError as e:
            logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ç–æ–∫–µ–Ω–∞–º–∏: {event.from_user.id}")
            text, markup = e.to_user_message_with_markup()
            await event.message.edit_text(text, reply_markup=markup)
        except RequestError as e:
            logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –±—é–¥–∂–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {event.from_user.id}")
            text, markup = e.to_user_message_with_markup()
            await event.message.edit_text(text, reply_markup=markup)
            return False
        except Exception as e:
            logger.exception(f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await event.message.edit_text("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False


class GetUserTransactionsHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        try:
            request_manager = RequestManager()
            income_data = await request_manager.make_request(method='GET', url='transactions/income', state=state)
            expense_data = await request_manager.make_request(method='GET', url='transactions/expense', state=state)
            context['user_transactions_count'] = len(income_data) + len(expense_data)
            return await super().handle(event, state, context)
        except TokenStorageError as e:
            logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ç–æ–∫–µ–Ω–∞–º–∏: {event.from_user.id}")
            text, markup = e.to_user_message_with_markup()
            await event.message.edit_text(text, reply_markup=markup)
        except RequestError as e:
            logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {event.from_user.id}")
            text, markup = e.to_user_message_with_markup()
            await event.message.edit_text(text, reply_markup=markup)
            return False
        except Exception as e:
            logger.exception(f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await event.message.edit_text("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False

class GenerateProfileMessageHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        from datetime import datetime
        try:
            print(context)
            profile_data = context['user_update_data']['user'] if context.get('user_update_data', False) else context['user_data']
            birthday = datetime.fromisoformat(profile_data['birthday']).strftime('%d.%m.%Y')
            last_login = datetime.fromisoformat(profile_data['last_login']).strftime('%d.%m.%Y %H:%M')
            patronymic = profile_data.get('patronymic') or '(–Ω–µ —É–∫–∞–∑–∞–Ω–æ)'
            cashboxes = context['user_cashboxes_count']
            budgets = context['user_budgets_count']
            transactions = context['user_transactions_count']

            message = (
                "üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
                f"üÜî ID: {profile_data['id']}\n"
                f"üë§ –ò–º—è: {profile_data['first_name']}\n"
                f"üë• –§–∞–º–∏–ª–∏—è: {profile_data['last_name']}\n"
                f"üìõ –û—Ç—á–µ—Å—Ç–≤–æ: {patronymic}\n"
                f"üìß Email: {profile_data['email']}\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {profile_data['phone_number']}\n"
                f"üéÇ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: {birthday}\n"
                f"üìù –õ–æ–≥–∏–Ω –≤ —Å–∏—Å—Ç–µ–º–µ: {profile_data['username']}\n"
                f"üí¨ Telegram Username: @{profile_data['telegram_username']}\n"
                f"‚úÖ –ê–∫—Ç–∏–≤–µ–Ω: {'–î–∞' if profile_data['is_active'] else '–ù–µ—Ç'}\n"
                f"üïí –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: {last_login}\n\n"
                f"üí∞ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—ç—à-–±–æ–∫—Å–æ–≤: {cashboxes}\n"
                f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—é–¥–∂–µ—Ç–æ–≤ –Ω–∞ –º–µ—Å—è—Ü: {budgets}\n"
                f"üí∏ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –º–µ—Å—è—Ü: {transactions}\n"
            )

            context['profile_message'] = message
            return await super().handle(event, state, context)

        except Exception as e:
            logger.error(
                f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
            print(e)

class SendProfileInfoHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        await state.update_data(profile_info=context['profile_message'])
        await state.set_state(EditProfileState.waiting_for_choosing_action)
        await state.update_data(chain_step=6)
        await event.message.edit_text(
            text=f"{context['profile_message']}",
            reply_markup=ProfileKeyboard.get_me_menu_keyboard()
        )
        return False


class GetChangeProfileHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –∏–∑–º–µ–Ω–µ–Ω–∏–π –ª–∏—á–Ω—ã–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        try:
            await state.set_state(EditProfileState.choosing_field)
            await state.update_data(chain_step=7)

            data = await state.get_data()
            await event.message.edit_text(
                text=f"{data.get('profile_info')}",
                reply_markup=ProfileKeyboard.get_me_change_keyboard()
            )
            return False
        except Exception as e:
            logger.error(
                f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é –∏–∑–º–µ–Ω–µ–Ω–∏–π –ª–∏—á–Ω—ã–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
            pass

class WaitNewFieldHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        try:
            await state.set_state(EditProfileState.waiting_for_value)
            await state.update_data(chain_step=8)

            data = await state.get_data()
            await event.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è: {data['field_to_edit']}")

            return False
        except Exception as e:
            logger.error(
                f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
            pass

class TakingNewFieldHandler(BaseHandler):

    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        try:
            # TODO: validate per type
            field = event.text.strip()

            await state.update_data(new_field=field)
            return await super().handle(event, state, context)


        except Exception as e:
            logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
            pass


class MakeDataDictHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –°–æ–∑–¥–∞–Ω–∏–µ JSON –¥–ª—è –∞–ø–¥–µ–π—Ç–∞ –¥–∞–Ω–Ω—ã—Ö")
        try:
            data = await state.get_data()
            field_to_edit = data['field_to_edit']
            new_field = data['new_field']

            request_manager = RequestManager()
            user_data = await request_manager.make_request(method='GET', url='auth/me', state=state)
            update_data = {
                "username": user_data['username'],
                "email": user_data['email'],
                "first_name": user_data['first_name'],
                "last_name": user_data['last_name'],
                "patronymic": user_data['patronymic'],
                "phone_number": user_data['phone_number'],
                "birthday": user_data['birthday'],
            }
            update_data[field_to_edit] = new_field

            context['json_to_update'] = update_data

            return await super().handle(event, state, context)
        except Exception as e:
            logger.error(
                f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
            print(e)


class EditProfileInfoHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        try:

            request_manager = RequestManager()
            user_update_data = await request_manager.make_request(method='PUT', url='auth/me', state=state, json=context['json_to_update'])
            context = user_update_data
            return await super().handle(event, state, context)

            # TODO: delete trash from state in the end + in the exit button (need only access, refresh, userid)

        except Exception as e:
            logger.error(
                f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
            # TODO message to user about except



class NotifyUpdateSuccessHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        try:
            if context['message'] == '–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω':
                await event.answer(text='–î–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!', reply_markup=ProfileKeyboard().get_back_profile_menu_keyboard())

        except Exception as e:
            logger.error(
                f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—Ö–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è{event.from_user.id}")

















