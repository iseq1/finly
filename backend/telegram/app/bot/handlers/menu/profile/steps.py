import datetime
import aiogram.types
from aiogram.fsm.context import FSMContext
from app.bot.handlers.base import BaseHandler
from app.bot.keyboards.profile import ProfileKeyboard
from app.bot.states import EditProfileState, CreateNewUserCashbox
from app.utils.request import RequestManager
from app.exceptions.profile_exceptions import ProfileError, ProfileInfoUnavailable
from app.exceptions.request_exceptions import TokenStorageError, RequestError
from app.utils.logger import logger
from app.utils.image_convertor import img_convertor


class GetProfileInfoHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        try:
            request_manager = RequestManager()
            data = await request_manager.make_request(method='GET', url='auth/me', state=state)

            if context is None:
                context = {}
            context['user_data'] = data

            return await super().handle(event, state, context)
        except TokenStorageError as e:
            logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ç–æ–∫–µ–Ω–∞–º–∏: {event.from_user.id}")
            text, markup = e.to_user_message_with_markup()
            await event.message.edit_text(text, reply_markup=markup)
        except RequestError as e:
            logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {event.from_user.id}")
            text, markup = e.to_user_message_with_markup()
            await event.message.edit_text(text, reply_markup=markup)
            return False
        except Exception as e:
            logger.exception(f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await event.message.edit_text("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False


class GetUserCashboxesHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∫—ç—à-–±–æ–∫—Å–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        try:
            request_manager = RequestManager()
            data = await request_manager.make_request(method='GET', url='auth/me/cashboxes', state=state)
            context['user_cashboxes_count'] = len(data)

            return await super().handle(event, state, context)
        except TokenStorageError as e:
            logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ç–æ–∫–µ–Ω–∞–º–∏: {event.from_user.id}")
            text, markup = e.to_user_message_with_markup()
            await event.message.edit_text(text, reply_markup=markup)
        except RequestError as e:
            logger.error(
                f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∫—ç—à-–±–æ–∫—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {event.from_user.id}")
            text, markup = e.to_user_message_with_markup()
            await event.message.edit_text(text, reply_markup=markup)
            return False
        except Exception as e:
            logger.exception(f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await event.message.edit_text("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False


class GetUserBudgetHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –±—é–¥–∂–µ—Ç–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        try:
            request_manager = RequestManager()
            data = await request_manager.make_request(method='GET', url='budget', state=state)
            context['user_budgets_count'] = len(data)
            return await super().handle(event, state, context)
        except TokenStorageError as e:
            logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ç–æ–∫–µ–Ω–∞–º–∏: {event.from_user.id}")
            text, markup = e.to_user_message_with_markup()
            await event.message.edit_text(text, reply_markup=markup)
        except RequestError as e:
            logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –±—é–¥–∂–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {event.from_user.id}")
            text, markup = e.to_user_message_with_markup()
            await event.message.edit_text(text, reply_markup=markup)
            return False
        except Exception as e:
            logger.exception(f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await event.message.edit_text("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False


class GetUserTransactionsHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        try:
            request_manager = RequestManager()
            income_data = await request_manager.make_request(method='GET', url='transactions/income', state=state)
            expense_data = await request_manager.make_request(method='GET', url='transactions/expense', state=state)
            context['user_transactions_count'] = len(income_data) + len(expense_data)
            return await super().handle(event, state, context)
        except TokenStorageError as e:
            logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ç–æ–∫–µ–Ω–∞–º–∏: {event.from_user.id}")
            text, markup = e.to_user_message_with_markup()
            await event.message.edit_text(text, reply_markup=markup)
        except RequestError as e:
            logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {event.from_user.id}")
            text, markup = e.to_user_message_with_markup()
            await event.message.edit_text(text, reply_markup=markup)
            return False
        except Exception as e:
            logger.exception(f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await event.message.edit_text("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False


class GenerateProfileMessageHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        from datetime import datetime
        try:
            profile_data = context['user_update_data']['user'] if context.get('user_update_data', False) else context['user_data']
            birthday = datetime.fromisoformat(profile_data['birthday']).strftime('%d.%m.%Y')
            last_login = datetime.fromisoformat(profile_data['last_login']).strftime('%d.%m.%Y %H:%M')
            patronymic = profile_data.get('patronymic') or '(–Ω–µ —É–∫–∞–∑–∞–Ω–æ)'
            cashboxes = context['user_cashboxes_count']
            budgets = context['user_budgets_count']
            transactions = context['user_transactions_count']

            message = (
                "üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
                f"üÜî ID: {profile_data['id']}\n"
                f"üë§ –ò–º—è: {profile_data['first_name']}\n"
                f"üë• –§–∞–º–∏–ª–∏—è: {profile_data['last_name']}\n"
                f"üìõ –û—Ç—á–µ—Å—Ç–≤–æ: {patronymic}\n"
                f"üìß Email: {profile_data['email']}\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {profile_data['phone_number']}\n"
                f"üéÇ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: {birthday}\n"
                f"üìù –õ–æ–≥–∏–Ω –≤ —Å–∏—Å—Ç–µ–º–µ: {profile_data['username']}\n"
                f"‚úÖ –ê–∫—Ç–∏–≤–µ–Ω: {'–î–∞' if profile_data['is_active'] else '–ù–µ—Ç'}\n"
                f"üïí –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: {last_login}\n\n"
                f"üí∞ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—ç—à-–±–æ–∫—Å–æ–≤: {cashboxes}\n"
                f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—é–¥–∂–µ—Ç–æ–≤ –Ω–∞ –º–µ—Å—è—Ü: {budgets}\n"
                f"üí∏ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –º–µ—Å—è—Ü: {transactions}\n"
            )

            context['profile_message'] = message
            return await super().handle(event, state, context)

        except TokenStorageError as e:
            logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ç–æ–∫–µ–Ω–∞–º–∏: {event.from_user.id}")
            text, markup = e.to_user_message_with_markup()
            await event.message.edit_text(text, reply_markup=markup)
        except RequestError as e:
            logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {event.from_user.id}")
            text, markup = e.to_user_message_with_markup()
            await event.message.edit_text(text, reply_markup=markup)
            return False
        except Exception as e:
            logger.exception(f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await event.message.edit_text("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False


class SendProfileInfoHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        await state.update_data(profile_info=context['profile_message'])
        await state.set_state(EditProfileState.waiting_for_choosing_action)
        await state.update_data(chain_step=6)
        await event.message.edit_text(
            text=f"{context['profile_message']}",
            reply_markup=ProfileKeyboard.get_me_menu_keyboard()
        )
        return False


class GetChangeProfileHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –∏–∑–º–µ–Ω–µ–Ω–∏–π –ª–∏—á–Ω—ã–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        try:
            await state.set_state(EditProfileState.choosing_field)
            await state.update_data(chain_step=7)

            data = await state.get_data()
            await event.message.edit_text(
                text=f"{data.get('profile_info')}",
                reply_markup=ProfileKeyboard.get_me_change_keyboard()
            )
            return False
        except TokenStorageError as e:
            logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ç–æ–∫–µ–Ω–∞–º–∏: {event.from_user.id}")
            text, markup = e.to_user_message_with_markup()
            await event.message.edit_text(text, reply_markup=markup)
        except RequestError as e:
            logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {event.from_user.id}")
            text, markup = e.to_user_message_with_markup()
            await event.message.edit_text(text, reply_markup=markup)
            return False
        except Exception as e:
            logger.exception(f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await event.message.edit_text("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False


class WaitNewFieldHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        try:
            await state.set_state(EditProfileState.waiting_for_value)
            await state.update_data(chain_step=8)

            data = await state.get_data()
            await event.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è: {data['field_to_edit']}")

            return False
        except TokenStorageError as e:
            logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ç–æ–∫–µ–Ω–∞–º–∏: {event.from_user.id}")
            text, markup = e.to_user_message_with_markup()
            await event.message.edit_text(text, reply_markup=markup)
        except RequestError as e:
            logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {event.from_user.id}")
            text, markup = e.to_user_message_with_markup()
            await event.message.edit_text(text, reply_markup=markup)
            return False
        except Exception as e:
            logger.exception(f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await event.message.edit_text("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False


class TakingNewFieldHandler(BaseHandler):

    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        try:
            from app.utils.profile import ValidateUserInput
            field = event.text.strip()

            data = await state.get_data()
            field_to_edit = data['field_to_edit']

            success, ref = ValidateUserInput().validate_field(type=field_to_edit, field=field)

            if not success:
                logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞")
                raise ref

            await state.update_data(new_field=ref)
            return await super().handle(event, state, context)

        except ValueError as e:
            logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞")
            await event.answer(f'{e}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!')
            return False
        except TokenStorageError as e:
            logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ç–æ–∫–µ–Ω–∞–º–∏: {event.from_user.id}")
            text, markup = e.to_user_message_with_markup()
            await event.answer(text, reply_markup=markup)
            return False
        except RequestError as e:
            logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {event.from_user.id}")
            text, markup = e.to_user_message_with_markup()
            await event.answer(text, reply_markup=markup)
            return False
        except Exception as e:
            logger.exception(f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await event.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False


class MakeDataDictHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –°–æ–∑–¥–∞–Ω–∏–µ JSON –¥–ª—è –∞–ø–¥–µ–π—Ç–∞ –¥–∞–Ω–Ω—ã—Ö")
        try:
            data = await state.get_data()
            field_to_edit = data['field_to_edit']
            new_field = data['new_field']
            request_manager = RequestManager()
            user_data = await request_manager.make_request(method='GET', url='auth/me', state=state)
            update_data = {
                "username": user_data['username'],
                "email": user_data['email'],
                "first_name": user_data['first_name'],
                "last_name": user_data['last_name'],
                "patronymic": user_data['patronymic'],
                "phone_number": user_data['phone_number'],
                "birthday": user_data['birthday'],
            }
            update_data[field_to_edit] = new_field

            context['json_to_update'] = update_data

            return await super().handle(event, state, context)
        except TokenStorageError as e:
            logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ç–æ–∫–µ–Ω–∞–º–∏: {event.from_user.id}")
            text, markup = e.to_user_message_with_markup()
            await event.answer(text, reply_markup=markup)
            return False
        except RequestError as e:
            logger.error(
                f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {event.from_user.id}")
            text, markup = e.to_user_message_with_markup()
            await event.answer(text, reply_markup=markup)
            return False
        except Exception as e:
            logger.exception(f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await event.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False


class EditProfileInfoHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        try:

            request_manager = RequestManager()
            user_update_data = await request_manager.make_request(method='PUT', url='auth/me', state=state, json=context['json_to_update'])
            context = user_update_data
            return await super().handle(event, state, context)

            # TODO: delete trash from state in the end + in the exit button (need only access, refresh, userid)

        except TokenStorageError as e:
            logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ç–æ–∫–µ–Ω–∞–º–∏: {event.from_user.id}")
            text, markup = e.to_user_message_with_markup()
            await event.answer(text, reply_markup=markup)
            return False
        except RequestError as e:
            logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {event.from_user.id}")
            text, markup = e.to_user_message_with_markup()
            await event.answer(text, reply_markup=markup)
            return False
        except Exception as e:
            logger.exception(f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await event.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False


class NotifyUpdateSuccessHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        try:
            if context['message'] == '–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω':
                await event.answer(text='–î–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!', reply_markup=ProfileKeyboard().get_back_profile_menu_keyboard())
                return False
        except TokenStorageError as e:
            logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ç–æ–∫–µ–Ω–∞–º–∏: {event.from_user.id}")
            text, markup = e.to_user_message_with_markup()
            await event.answer(text, reply_markup=markup)
            return False
        except RequestError as e:
            logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {event.from_user.id}")
            text, markup = e.to_user_message_with_markup()
            await event.answer(text, reply_markup=markup)
            return False
        except Exception as e:
            logger.exception(f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await event.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False


class GetUserCashboxInfo(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫—ç—à-–±–æ–∫—Å–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        try:
            request_manager = RequestManager()
            data = await request_manager.make_request(method='GET', url='auth/me/cashboxes', state=state)
            if context is None:
                context = {}
            context['user_cashboxes'] = data
            return await super().handle(event, state, context)
        except TokenStorageError as e:
            logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ç–æ–∫–µ–Ω–∞–º–∏: {event.from_user.id}")
            text, markup = e.to_user_message_with_markup()
            await event.answer(text, reply_markup=markup)
            return False
        except RequestError as e:
            logger.error(
                f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {event.from_user.id}")
            text, markup = e.to_user_message_with_markup()
            await event.answer(text, reply_markup=markup)
            return False
        except Exception as e:
            logger.exception(f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await event.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False


class CheckUserCashboxesHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫—ç—à-–±–æ–∫—Å–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        try:
            user_cashboxes = context['user_cashboxes']
            if len(user_cashboxes) == 0:
                await event.message.edit_text(text='–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –µ–¥–∏–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫—ç—à-–±–æ–∫—Å–∞!', reply_markup=ProfileKeyboard().get_empty_user_cashbox_menu_keyboard())
            else:
                await state.update_data(user_cashboxes=user_cashboxes)
                return await super().handle(event, state, context)
        except TokenStorageError as e:
            logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ç–æ–∫–µ–Ω–∞–º–∏: {event.from_user.id}")
            text, markup = e.to_user_message_with_markup()
            await event.answer(text, reply_markup=markup)
            return False
        except RequestError as e:
            logger.error(
                f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {event.from_user.id}")
            text, markup = e.to_user_message_with_markup()
            await event.answer(text, reply_markup=markup)
            return False
        except Exception as e:
            logger.exception(f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await event.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False


class ShowUserCashbox(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫—ç—à-–±–æ–∫—Å–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        try:
            data = await state.get_data()
            user_cashboxes = data.get('user_cashboxes')

            index = data.get("user_cashbox_index", 0)
            cashbox = user_cashboxes[index]

            await event.message.edit_text(self._format_cashbox(cashbox, index, len(user_cashboxes)), reply_markup=ProfileKeyboard().get_more_action_user_cashbox_keyboard() if data.get('user_cashbox_details', False) else ProfileKeyboard().get_user_cashbox_menu_keyboard(), parse_mode='MarkdownV2')
            return True
        except Exception as e:
            logger.exception(f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∫—ç—à-–±–æ–∫—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await event.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False

    def _format_cashbox(self, cashbox: dict, index: int, total: int) -> str:
        box = cashbox.get("cashbox", {})
        provider = box.get("provider", {})
        cashbox_type = box.get("type", {})

        def esc(text):
            """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ MarkdownV2"""
            if not isinstance(text, str):
                text = str(text)
            return (
                text.replace('\\', '\\\\')
                .replace('.', '\\.')
                .replace('-', '\\-')
                .replace('(', '\\(')
                .replace(')', '\\)')
                .replace('[', '\\[')
                .replace(']', '\\]')
                .replace('{', '\\{')
                .replace('}', '\\}')
                .replace('!', '\\!')
                .replace('=', '\\=')
                .replace('+', '\\+')
                .replace('*', '\\*')
                .replace('_', '\\_')
                .replace('`', '\\`')
                .replace('>', '\\>')
                .replace('#', '\\#')
                .replace('|', '\\|')
                .replace('~', '\\~')
            )

        return (
            f"üíº *–ö—ç—à\\-–±–æ–∫—Å {index + 1}/{total}*\n\n"
            f"üè∑Ô∏è *–ù–∞–∑–≤–∞–Ω–∏–µ:* {esc(box.get('name', '‚Äî'))}\n"
            f"üè¢ *–ü—Ä–æ–≤–∞–π–¥–µ—Ä:* {esc(provider.get('name', '‚Äî'))}\n"
            f"üì¶ *–¢–∏–ø:* {esc(cashbox_type.get('name', '‚Äî'))}\n"
            f"üí∞ *–ë–∞–ª–∞–Ω—Å:* {esc(cashbox.get('balance', '0'))} {esc(box.get('currency', '‚Äî'))}\n"
            f"‚úèÔ∏è *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –∏–º—è:* {esc(cashbox.get('custom_name', '‚Äî'))}\n"
            f"üóíÔ∏è *–ó–∞–º–µ—Ç–∫–∞:* {esc(cashbox.get('note', '‚Äî'))}"
        )


class GetProviderInfoHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –∫—ç—à-–±–æ–∫—Å–æ–≤ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        try:
            request_manager = RequestManager()
            data = await request_manager.make_request(method='GET', url='settings/cashboxes-provider', state=state)
            if context is None:
                context = {}
            context['cashbox_providers'] = data
            return await super().handle(event, state, context)
        except TokenStorageError as e:
            logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ç–æ–∫–µ–Ω–∞–º–∏: {event.from_user.id}")
            text, markup = e.to_user_message_with_markup()
            await event.answer(text, reply_markup=markup)
            return False
        except RequestError as e:
            logger.error(
                f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {event.from_user.id}")
            text, markup = e.to_user_message_with_markup()
            await event.answer(text, reply_markup=markup)
            return False
        except Exception as e:
            logger.exception(f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await event.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False


class CheckCashboxProvidersHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –∫—ç—à-–±–æ–∫—Å–æ–≤")
        try:
            cashbox_providers = context['cashbox_providers']
            if len(cashbox_providers) == 0:
                await event.message.edit_text(text='–í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫—ç—à-–±–æ–∫—Å–∞!\n–ñ–¥—ë–º –≤–∞—Å –ø–æ–∑–∂–µ <3', reply_markup=ProfileKeyboard().get_back_profile_menu_keyboard())
            else:
                await state.update_data(cashbox_providers=cashbox_providers)
                return await super().handle(event, state, context)
        except TokenStorageError as e:
            logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ç–æ–∫–µ–Ω–∞–º–∏: {event.from_user.id}")
            text, markup = e.to_user_message_with_markup()
            await event.answer(text, reply_markup=markup)
            return False
        except RequestError as e:
            logger.error(
                f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {event.from_user.id}")
            text, markup = e.to_user_message_with_markup()
            await event.answer(text, reply_markup=markup)
            return False
        except Exception as e:
            logger.exception(f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await event.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False



class ShowCashboxProvidersHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –∫—ç—à-–±–æ–∫—Å–æ–≤ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        try:
            data = await state.get_data()
            cashbox_providers = data.get('cashbox_providers')

            index = data.get("cashbox_providers_index", 0)
            provider = cashbox_providers[index]
            await event.message.delete()
            provider_logo = provider.get('logo_url')
            await event.message.answer_photo(
                photo=provider_logo if not str(provider_logo).startswith('data:') else img_convertor(provider_logo),
                reply_markup=ProfileKeyboard().get_provider_cashbox_menu_keyboard(provider.get('name', None))
            )
            return True
        except Exception as e:
            logger.exception(f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –∫—ç—à-–±–æ–∫—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await event.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False

class ClearAfterProvidersHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        try:
            await event.message.delete()
            await event.message.answer(text='–ú–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è:', reply_markup=ProfileKeyboard.get_profile_menu_keyboard())
        except Exception as e:
            logger.exception(f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ –≤ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await event.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False


class TakingProviderInfoHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∫—ç—à-–±–æ–∫—Å–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        try:
            data = await state.get_data()
            cashbox_providers = data.get("cashbox_providers", [])
            index = (data.get("cashbox_providers_index", 0)) % len(cashbox_providers)
            if context is None:
                context = {}
            context['provider'] = cashbox_providers[index]
            return await super().handle(event, state, context)
        except Exception as e:
            logger.exception(
                f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∫—ç—à-–±–æ–∫—Å–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await event.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False


class GetCashboxesByProvider(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—ç—à-–±–æ–∫—Å–æ–≤ –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        try:
            request_manager = RequestManager()
            data = await request_manager.make_request(method='GET', url=f'settings/cashboxes?provider_id={(context["provider"]).get("id")}', state=state)
            context['cashboxes_by_provider'] = data
            return await super().handle(event, state, context)
        except TokenStorageError as e:
            logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ç–æ–∫–µ–Ω–∞–º–∏: {event.from_user.id}")
            text, markup = e.to_user_message_with_markup()
            await event.answer(text, reply_markup=markup)
            return False
        except RequestError as e:
            logger.error(
                f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—ç—à-–±–æ–∫—Å–æ–≤ –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {event.from_user.id}")
            text, markup = e.to_user_message_with_markup()
            await event.answer(text, reply_markup=markup)
            return False
        except Exception as e:
            logger.exception(f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—ç—à-–±–æ–∫—Å–æ–≤ –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await event.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False

class CheckCashboxesByProviderHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à-–±–æ–∫—Å–æ–≤ –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        try:
            if context['cashboxes_by_provider'] and len(context['cashboxes_by_provider'])!=0:
                await state.update_data(cashboxes_by_provider=context['cashboxes_by_provider'])
                return await super().handle(event, state, context)
            else:
                await event.message.delete()
                await event.message.edit_text(text='–í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫—ç—à-–±–æ–∫—Å–∞ –æ—Ç –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞!\n–ñ–¥—ë–º –≤–∞—Å –ø–æ–∑–∂–µ <3', reply_markup=ProfileKeyboard().get_back_profile_menu_keyboard())
                return False
        except Exception as e:
            logger.exception(f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫—ç—à-–±–æ–∫—Å–æ–≤ –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É: {e}")
            await event.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False

class ShowCashboxesByProviderHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫—ç—à-–±–æ–∫—Å–æ–≤ –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        try:
            data = await state.get_data()
            cashboxes_by_provider = data.get('cashboxes_by_provider')
            index = data.get("cashbox_by_provider_index", 0)
            cashbox = cashboxes_by_provider['items'][index]
            print(cashbox)
            await event.message.delete()
            await event.message.answer(self._format_cashbox(cashbox, index, len(cashboxes_by_provider['items'])), reply_markup=ProfileKeyboard().get_cashboxes_by_provider_menu_keyboard(), parse_mode='MarkdownV2')
        except Exception as e:
            logger.exception(f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∫—ç—à-–±–æ–∫—Å–æ–≤ –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É: {e}")
            await event.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False

    def _format_cashbox(self, cashbox: dict, index: int, total: int) -> str:
        provider = cashbox.get("provider", {})
        cashbox_type = cashbox.get("type", {})

        def esc(text):
            """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ MarkdownV2"""
            if not isinstance(text, str):
                text = str(text)
            return (
                text.replace('\\', '\\\\')
                .replace('.', '\\.')
                .replace('-', '\\-')
                .replace('(', '\\(')
                .replace(')', '\\)')
                .replace('[', '\\[')
                .replace(']', '\\]')
                .replace('{', '\\{')
                .replace('}', '\\}')
                .replace('!', '\\!')
                .replace('=', '\\=')
                .replace('+', '\\+')
                .replace('*', '\\*')
                .replace('_', '\\_')
                .replace('`', '\\`')
                .replace('>', '\\>')
                .replace('#', '\\#')
                .replace('|', '\\|')
                .replace('~', '\\~')
            )

        return (
            f"üíº *–ö—ç—à\\-–±–æ–∫—Å {index + 1}/{total}*\n\n"
            f"üè∑Ô∏è *–ù–∞–∑–≤–∞–Ω–∏–µ:* {esc(cashbox.get('name', '‚Äî'))}\n"
            f"üè¢ *–ü—Ä–æ–≤–∞–π–¥–µ—Ä:* {esc(provider.get('name', '‚Äî'))}\n"
            f"üì¶ *–¢–∏–ø:* {esc(cashbox_type.get('name', '‚Äî'))}\n"
            f"üí∞ *–í–∞–ª—é—Ç–∞:* {esc(cashbox.get('currency', '‚Äî'))}\n"
            f"‚úèÔ∏è *–û–ø–∏—Å–∞–Ω–∏–µ:* {esc(cashbox.get('description', '‚Äî'))}\n"

        )


class TakingNewUserCashboxInfoHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º –∫—ç—à-–±–æ–∫—Å–µ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        try:
            data = await state.get_data()
            cashboxes_by_provider = data.get('cashboxes_by_provider')
            index = data.get("cashbox_by_provider_index", 0)
            cashbox = cashboxes_by_provider['items'][index]
            new_user_cashbox = data.get('new_user_cashbox')
            if isinstance(event, aiogram.types.Message):
                await event.answer(self._format_cashbox(cashbox, new_user_cashbox), reply_markup=ProfileKeyboard().get_set_new_user_cashbox_keyboard(new_user_cashbox.get('is_auto_update', False)) if len(new_user_cashbox.items()) < 4 else ProfileKeyboard().get_set_done_new_user_cashbox_keyboard(new_user_cashbox.get('is_auto_update', False)), parse_mode='MarkdownV2')
                return True
            await event.message.edit_text(self._format_cashbox(cashbox, new_user_cashbox), reply_markup=ProfileKeyboard().get_set_new_user_cashbox_keyboard(new_user_cashbox.get('is_auto_update', False)) if len(new_user_cashbox.items()) < 4 else ProfileKeyboard().get_set_done_new_user_cashbox_keyboard(new_user_cashbox.get('is_auto_update', False)), parse_mode='MarkdownV2')
        except Exception as e:
            logger.exception(
                f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º –∫—ç—à-–±–æ–∫—Å–µ: {e}")
            await event.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False


    def _format_cashbox(self, cashbox: dict, new_user_cashbox: dict) -> str:
        provider = cashbox.get("provider", {})
        cashbox_type = cashbox.get("type", {})

        def esc(text):
            """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ MarkdownV2"""
            if not isinstance(text, str):
                text = str(text)
            return (
                text.replace('\\', '\\\\')
                .replace('.', '\\.')
                .replace('-', '\\-')
                .replace('(', '\\(')
                .replace(')', '\\)')
                .replace('[', '\\[')
                .replace(']', '\\]')
                .replace('{', '\\{')
                .replace('}', '\\}')
                .replace('!', '\\!')
                .replace('=', '\\=')
                .replace('+', '\\+')
                .replace('*', '\\*')
                .replace('_', '\\_')
                .replace('`', '\\`')
                .replace('>', '\\>')
                .replace('#', '\\#')
                .replace('|', '\\|')
                .replace('~', '\\~')
            )

        return (
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ *{esc(cashbox.get('name', '‚Äî'))}* –æ—Ç *{esc(provider.get('name', '‚Äî'))}*\n\n"
            f"‚úèÔ∏è *–û–ø–∏—Å–∞–Ω–∏–µ:* {esc(cashbox.get('description', '‚Äî'))}\n"
            f"üì¶ *–¢–∏–ø:* {esc(cashbox_type.get('name', '‚Äî'))}\n"
            f"üí∞ *–í–∞–ª—é—Ç–∞:* {esc(cashbox.get('currency', '‚Äî'))}\n\n"
            f"{esc('–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–π –∫—ç—à-–±–æ–∫—Å –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏ —É—á–µ—Ç–µ –ª–∏—á–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤!')}\n"
            f"–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è:\n\n"
            f"*–ë–∞–ª–∞–Ω—Å*: {esc(new_user_cashbox.get('balance', '‚Äî'))}\n"
            f"*–ö–∞—Å—Ç–æ–º–Ω–æ–µ –∏–º—è*: {esc(new_user_cashbox.get('custom_name', '‚Äî'))}\n"
            f"*–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ*: {esc(new_user_cashbox.get('note', '‚Äî'))}\n"
            f"*–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ*: {esc(new_user_cashbox.get('is_auto_update', '‚Äî'))}\n"

        )

class WaitBalanceUserCashboxHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫—ç—à-–±–æ–∫—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        try:
            await state.set_state(CreateNewUserCashbox.waiting_for_balance)
            data = await state.get_data()
            cashboxes_by_provider = data.get('cashboxes_by_provider')
            index = data.get("cashbox_by_provider_index", 0)
            cashbox = cashboxes_by_provider['items'][index]
            await event.message.edit_text(text=f'–í–≤–µ–¥–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –∫—ç—à-–±–æ–∫—Å–∞.\n–ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã, —á—Ç–æ –≤–∞–ª—é—Ç–∞ –∫—ç—à-–±–æ–∫—Å–∞ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç —Å—É–º–º—É –≤ {cashbox.get("currency")}')
            return False
        except Exception as e:
            logger.exception(f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∫—ç—à-–±–æ–∫—Å–æ–≤ –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É: {e}")
            await event.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False


class WaitCustomNameUserCashboxHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫—ç—à-–±–æ–∫—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        try:
            await state.set_state(CreateNewUserCashbox.waiting_for_custom_name)
            await event.message.edit_text(text=f'–í–≤–µ–¥–∏—Ç–µ –∫–∞—Å—Ç–æ–º–Ω–æ–µ –∏–º—è –¥–ª—è –∫—ç—à-–±–æ–∫—Å–∞.')
            return False
        except Exception as e:
            logger.exception(f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∫—ç—à-–±–æ–∫—Å–æ–≤ –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É: {e}")
            await event.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False

class WaiNoteUserCashboxHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫—ç—à-–±–æ–∫—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        try:
            await state.set_state(CreateNewUserCashbox.waiting_for_note)
            await event.message.edit_text(text=f'–í–≤–µ–¥–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É –¥–ª—è –∫—ç—à-–±–æ–∫—Å–∞.')
            return False
        except Exception as e:
            logger.exception(f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∫—ç—à-–±–æ–∫—Å–æ–≤ –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É: {e}")
            await event.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False


class TakingNoteUserCashboxHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫—ç—à-–±–æ–∫—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        try:
            from app.utils.profile import ValidateUserInput
            field = event.text.strip()
            field_to_edit = 'note'
            success, ref = ValidateUserInput().validate_field(type=field_to_edit, field=field)
            if not success:
                logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞")
                raise ref
            data = await state.get_data()
            new_user_cashbox = data.get('new_user_cashbox')
            new_user_cashbox['note'] = ref
            await state.update_data(new_user_cashbox=new_user_cashbox)
            return await super().handle(event, state, context)
        except ValueError as e:
            logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞")
            await event.answer(f'{e}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!')
            return False
        except Exception as e:
            logger.exception(
                f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∫—ç—à-–±–æ–∫—Å–æ–≤ –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É: {e}")
            await event.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False


class TakingCustomNameUserCashboxHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫—ç—à-–±–æ–∫—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        try:
            from app.utils.profile import ValidateUserInput
            field = event.text.strip()
            field_to_edit = 'custom_name'
            success, ref = ValidateUserInput().validate_field(type=field_to_edit, field=field)
            if not success:
                logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞")
                raise ref
            data = await state.get_data()
            new_user_cashbox = data.get('new_user_cashbox')
            new_user_cashbox['custom_name'] = ref
            await state.update_data(new_user_cashbox=new_user_cashbox)
            return await super().handle(event, state, context)
        except ValueError as e:
            logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞")
            await event.answer(f'{e}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!')
            return False
        except Exception as e:
            logger.exception(
                f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∫—ç—à-–±–æ–∫—Å–æ–≤ –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É: {e}")
            await event.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False


class TakingBalanceUserCashboxHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫—ç—à-–±–æ–∫—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        try:
            from app.utils.profile import ValidateUserInput
            field = event.text.strip()

            field_to_edit = 'balance'
            success, ref = ValidateUserInput().validate_field(type=field_to_edit, field=field)

            if not success:
                logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞")
                raise ref

            data = await state.get_data()
            new_user_cashbox = data.get('new_user_cashbox')
            new_user_cashbox['balance'] = ref
            await state.update_data(new_user_cashbox=new_user_cashbox)
            return await super().handle(event, state, context)


        except ValueError as e:
            logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞")
            await event.answer(f'{e}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!')
            return False
        except Exception as e:
            logger.exception(
                f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∫—ç—à-–±–æ–∫—Å–æ–≤ –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É: {e}")
            await event.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False


class GenerateNewUserCashboxDataHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ json –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫—ç—à-–±–æ–∫—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        try:
            data = await state.get_data()
            new_user_cashbox = data.get('new_user_cashbox')
            cashboxes_by_provider = data.get('cashboxes_by_provider')
            index = data.get("cashbox_by_provider_index", 0)
            cashbox = cashboxes_by_provider['items'][index]

            post_data = {
              "user_id": data.get('user_id'),
              "cashbox_id": cashbox['id'],
              "balance": new_user_cashbox['balance'],
              "is_auto_update": new_user_cashbox['is_auto_update'],
              "last_synced_at": datetime.datetime.now().isoformat(),
              "custom_name": new_user_cashbox['custom_name'],
              "note": new_user_cashbox['note']
            }

            if context is None:
                context = {}
            context['post_data'] = post_data

            return await super().handle(event, state, context)
        except Exception as e:
            logger.exception(
                f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∫—ç—à-–±–æ–∫—Å–æ–≤ –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É: {e}")
            await event.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False


class PostNewUserCashboxHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫—ç—à-–±–æ–∫—Å–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        try:
            request_manager = RequestManager()
            data = await request_manager.make_request(method='POST', url='auth/me/cashboxes', state=state, json=context['post_data'])
            return await super().handle(event, state, context)
        except TokenStorageError as e:
            logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ç–æ–∫–µ–Ω–∞–º–∏: {event.from_user.id}")
            text, markup = e.to_user_message_with_markup()
            await event.answer(text, reply_markup=markup)
            return False
        except RequestError as e:
            logger.error(
                f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {event.from_user.id}")
            text, markup = e.to_user_message_with_markup()
            await event.answer(text, reply_markup=markup)
            return False
        except Exception as e:
            logger.exception(f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await event.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False


class NotifyNewUserCashboxHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫—ç—à-–±–æ–∫—Å–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        try:
            await event.message.edit_text(text='–í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫—ç—à-–±–æ–∫—Å!\n\n–¢–µ–ø–µ—Ä—å –µ–≥–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —É—á–µ—Ç–∞ –¥–≤–∏–∂–µ–Ω–∏—è –≤–∞—à–∏—Ö —Å—Ä–µ–¥—Å—Ç–≤.', reply_markup=ProfileKeyboard.get_back_profile_menu_keyboard())
        except TokenStorageError as e:
            logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ç–æ–∫–µ–Ω–∞–º–∏: {event.from_user.id}")
            text, markup = e.to_user_message_with_markup()
            await event.answer(text, reply_markup=markup)
            return False
        except RequestError as e:
            logger.error(
                f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {event.from_user.id}")
            text, markup = e.to_user_message_with_markup()
            await event.answer(text, reply_markup=markup)
            return False
        except Exception as e:
            logger.exception(f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await event.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False


class ConfirmingDeletionUserCashboxHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫—ç—à-–±–æ–∫—Å–∞ {event.from_user.id}")
        try:
            data = await state.get_data()
            user_cashboxes = data.get('user_cashboxes')
            index = data.get("user_cashbox_index", 0)
            cashbox = user_cashboxes[index]
            await event.message.edit_text(text=f'–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –∫—ç—à-–±–æ–∫—Å ({cashbox.get("cashbox", {}).get("name", "‚Äî")})?', reply_markup=ProfileKeyboard.get_confirm_for_deletion_user_cashbox_keyboard())
        except TokenStorageError as e:
            logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ç–æ–∫–µ–Ω–∞–º–∏: {event.from_user.id}")
            text, markup = e.to_user_message_with_markup()
            await event.answer(text, reply_markup=markup)
            return False
        except RequestError as e:
            logger.error(
                f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {event.from_user.id}")
            text, markup = e.to_user_message_with_markup()
            await event.answer(text, reply_markup=markup)
            return False
        except Exception as e:
            logger.exception(f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫—ç—à-–±–æ–∫—Å–∞: {e}")
            await event.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False


class DeleteUserCashboxesHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫-–±")
        try:
            data = await state.get_data()

            user_cashboxes = data.get('user_cashboxes')
            index = data.get("user_cashbox_index", 0)
            cashbox = user_cashboxes[index]
            request_manager = RequestManager()
            temp = await request_manager.make_request(method='DELETE', url=f'auth/me/cashboxes/{cashbox.get("id", "None")}', state=state)
            # –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–µ–π—Ç –∏ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
            tokens = {
                'access_token': data.get('access_token'),
                'refresh_token': data.get('refresh_token'),
                'user_id': data.get('user_id'),
            }
            await state.clear()
            await state.update_data(**tokens)
            return await super().handle(event, state, context)
        except TokenStorageError as e:
            logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ç–æ–∫–µ–Ω–∞–º–∏: {event.from_user.id}")
            text, markup = e.to_user_message_with_markup()
            await event.message.edit_text(text, reply_markup=markup)
        except RequestError as e:
            logger.error(
                f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∫—ç—à-–±–æ–∫—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {event.from_user.id}")
            text, markup = e.to_user_message_with_markup()
            await event.message.edit_text(text, reply_markup=markup)
            return False
        except Exception as e:
            logger.exception(f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await event.message.edit_text("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False

class NotifyDeletionUserCashboxHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ –ö–ë")
        try:
            await event.message.edit_text(text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫—ç—à-–±–æ–∫—Å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!', reply_markup=ProfileKeyboard.get_back_profile_menu_keyboard())
        except TokenStorageError as e:
            logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ç–æ–∫–µ–Ω–∞–º–∏: {event.from_user.id}")
            text, markup = e.to_user_message_with_markup()
            await event.message.edit_text(text, reply_markup=markup)
        except RequestError as e:
            logger.error(
                f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∫—ç—à-–±–æ–∫—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {event.from_user.id}")
            text, markup = e.to_user_message_with_markup()
            await event.message.edit_text(text, reply_markup=markup)
            return False
        except Exception as e:
            logger.exception(f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await event.message.edit_text("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False
