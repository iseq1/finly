import datetime
import math

import aiogram.types
from aiogram.fsm.context import FSMContext
from app.bot.handlers.base import BaseHandler
from app.bot.keyboards.transaction import TransactionKeyboard
from app.bot.states import TransactionState
from app.utils.request import RequestManager
from app.exceptions.request_exceptions import TokenStorageError, RequestError
from app.utils.logger import logger

class GetSelectTransactionTypeHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –ú–µ–Ω—é –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
        try:
            await state.set_state(TransactionState.waiting_for_transaction_field)
            await event.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, —Å –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É:', reply_markup=TransactionKeyboard.get_select_transaction_type_keyboard())
        except Exception as e:
            logger.exception(f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await event.message.edit_text("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False


class GetUserCashboxInfoHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫—ç—à-–±–æ–∫—Å–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        try:
            request_manager = RequestManager()
            data = await request_manager.make_request(method='GET', url='auth/me/cashboxes', state=state)
            if context is None:
                context = {}
            context['user_cashboxes'] = data
            return await super().handle(event, state, context)
        except TokenStorageError as e:
            logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ç–æ–∫–µ–Ω–∞–º–∏: {event.from_user.id}")
            text, markup = e.to_user_message_with_markup()
            await event.answer(text, reply_markup=markup)
            return False
        except RequestError as e:
            logger.error(
                f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {event.from_user.id}")
            text, markup = e.to_user_message_with_markup()
            await event.answer(text, reply_markup=markup)
            return False
        except Exception as e:
            logger.exception(f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await event.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False


class CheckUserCashboxesHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫—ç—à-–±–æ–∫—Å–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        try:
            user_cashboxes = context['user_cashboxes']
            if len(user_cashboxes) == 0:
                await event.message.edit_text(text='–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –µ–¥–∏–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫—ç—à-–±–æ–∫—Å–∞!', reply_markup=TransactionKeyboard().get_empty_user_cashbox_menu_keyboard())
            else:
                await state.update_data(user_cashboxes=user_cashboxes)
                return await super().handle(event, state, context)
        except TokenStorageError as e:
            logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ç–æ–∫–µ–Ω–∞–º–∏: {event.from_user.id}")
            text, markup = e.to_user_message_with_markup()
            await event.answer(text, reply_markup=markup)
            return False
        except RequestError as e:
            logger.error(
                f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {event.from_user.id}")
            text, markup = e.to_user_message_with_markup()
            await event.answer(text, reply_markup=markup)
            return False
        except Exception as e:
            logger.exception(f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await event.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False


class ShowUserCashboxHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫—ç—à-–±–æ–∫—Å–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        try:
            await state.set_state(TransactionState.waiting_for_transaction_user_cashbox)

            data = await state.get_data()
            user_cashboxes = data.get('user_cashboxes')

            index = data.get("user_cashbox_index", 0)
            cashbox = user_cashboxes[index]

            await event.message.edit_text(self._format_cashbox(cashbox, index, len(user_cashboxes)), reply_markup=TransactionKeyboard().get_user_cashbox_menu_keyboard(), parse_mode='MarkdownV2')
            return True
        except Exception as e:
            logger.exception(f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∫—ç—à-–±–æ–∫—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await event.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False

    def _format_cashbox(self, cashbox: dict, index: int, total: int) -> str:
        box = cashbox.get("cashbox", {})
        provider = box.get("provider", {})
        cashbox_type = box.get("type", {})

        def esc(text):
            """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ MarkdownV2"""
            if not isinstance(text, str):
                text = str(text)
            return (
                text.replace('\\', '\\\\')
                .replace('.', '\\.')
                .replace('-', '\\-')
                .replace('(', '\\(')
                .replace(')', '\\)')
                .replace('[', '\\[')
                .replace(']', '\\]')
                .replace('{', '\\{')
                .replace('}', '\\}')
                .replace('!', '\\!')
                .replace('=', '\\=')
                .replace('+', '\\+')
                .replace('*', '\\*')
                .replace('_', '\\_')
                .replace('`', '\\`')
                .replace('>', '\\>')
                .replace('#', '\\#')
                .replace('|', '\\|')
                .replace('~', '\\~')
            )

        return (
            f"–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –≤–∞—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π *{esc('–∫—ç—à-–±–æ–∫—Å')}*\\.\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—à–∏—Ö *{esc('–∫—ç—à-–±–æ–∫—Å–æ–≤:')}*\n\n"
            f"üíº *–ö—ç—à\\-–±–æ–∫—Å {index + 1}/{total}*\n\n"
            f"üè∑Ô∏è *–ù–∞–∑–≤–∞–Ω–∏–µ:* {esc(box.get('name', '‚Äî'))}\n"
            f"üè¢ *–ü—Ä–æ–≤–∞–π–¥–µ—Ä:* {esc(provider.get('name', '‚Äî'))}\n"
            f"üì¶ *–¢–∏–ø:* {esc(cashbox_type.get('name', '‚Äî'))}\n"
            f"üí∞ *–ë–∞–ª–∞–Ω—Å:* {esc(cashbox.get('balance', '0'))} {esc(box.get('currency', '‚Äî'))}\n"
            f"‚úèÔ∏è *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –∏–º—è:* {esc(cashbox.get('custom_name', '‚Äî'))}\n"
            f"üóíÔ∏è *–ó–∞–º–µ—Ç–∫–∞:* {esc(cashbox.get('note', '‚Äî'))}"
        )


class RememberUserCashboxHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫—ç—à-–±–æ–∫—Å–∞ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        try:
            data = await state.get_data()
            user_cashboxes = data.get('user_cashboxes')
            index = data.get("user_cashbox_index", 0)
            cashbox = user_cashboxes[index]
            await state.update_data(user_cashboxes=cashbox)
            return await super().handle(event, state, context)
        except Exception as e:
            logger.exception(f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∫—ç—à-–±–æ–∫—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await event.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False

class GetCategoryInfoHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        try:
            data = await state.get_data()
            transaction_action = data.get('transaction_action')
            request_manager = RequestManager()
            data = await request_manager.make_request(method='GET', url=f'settings/categories?type={transaction_action["type"]}', state=state)
            if context is None:
                context = {}
            context['categories'] = data
            return await super().handle(event, state, context)
        except TokenStorageError as e:
            logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ç–æ–∫–µ–Ω–∞–º–∏: {event.from_user.id}")
            text, markup = e.to_user_message_with_markup()
            await event.answer(text, reply_markup=markup)
            return False
        except RequestError as e:
            logger.error(
                f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {event.from_user.id}")
            text, markup = e.to_user_message_with_markup()
            await event.answer(text, reply_markup=markup)
            return False
        except Exception as e:
            logger.exception(f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await event.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False

class CheckCategoryHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        try:
            categories = context['categories']
            if len(categories) == 0:
                await event.message.edit_text(text='–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∏ –æ–¥–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É',
                                              reply_markup=TransactionKeyboard().get_empty_category_menu_keyboard())
            else:
                await state.update_data(categories=categories)
                return await super().handle(event, state, context)

        except Exception as e:
            logger.exception(f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await event.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False


class ShowCategoriesHandler(BaseHandler):
    CATEGORIES_PER_PAGE = 6
    async def handle(self, event, state: FSMContext, context: dict = None):
        try:
            logger.debug(f"[{self.__class__.__name__}] –ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
            await state.set_state(TransactionState.waiting_for_transaction_category)

            data = await state.get_data()
            categories = data.get("categories", [])
            index = data.get("categories_index", 0)
            print(categories)
            print(len(categories))
            print(index)
            # –°—á–∏—Ç–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            total_pages = math.ceil(len(categories) / self.CATEGORIES_PER_PAGE)
            page = index % total_pages

            # –í—ã–±–∏—Ä–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            start = page * self.CATEGORIES_PER_PAGE
            end = start + self.CATEGORIES_PER_PAGE
            current_page_categories = categories[start:end]

            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await event.message.delete()
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = self._generate_keyboard(current_page_categories, total_pages, page)
            await event.message.answer("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)
            return True
        except Exception as e:
            logger.exception(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
            await event.message.answer("üö® –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")

    def _generate_keyboard(self, categories: list, total_pages: int, page: int):
        buttons = []
        row = []

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        for i, category in enumerate(categories):
            btn = TransactionKeyboard.get_category_button(text=category['name'], id=i)
            row.append(btn)
            if len(row) == 2:
                buttons.append(row)
                row = []

        # –î–æ–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if row:
            while len(row) < 2:
                row.append(TransactionKeyboard.get_empty_category_button())
            buttons.append(row)

        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        buttons.append(TransactionKeyboard.get_category_menu_subkeyboard(page, total_pages))

        return TransactionKeyboard.get_category_menu_keyboard(buttons)


class RememberCategoryHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        try:
            data = await state.get_data()
            categories = data.get('categories')
            index = data.get("categories_index", 0)
            category = categories[index]
            await state.update_data(category=category)
            if context is None:
                context = {}
            context['category_id'] = category['id']
            return await super().handle(event, state, context)
        except Exception as e:
            logger.exception(f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∫—ç—à-–±–æ–∫—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await event.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False

class GetSubcategoryByCategoryInfoHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥-–∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        try:
            request_manager = RequestManager()
            data = await request_manager.make_request(method='GET', url=f'settings/subcategories?category_id={context["category_id"]}', state=state)
            if context is None:
                context = {}
            context['subcategories'] = data
            return await super().handle(event, state, context)
        except TokenStorageError as e:
            logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ç–æ–∫–µ–Ω–∞–º–∏: {event.from_user.id}")
            text, markup = e.to_user_message_with_markup()
            await event.answer(text, reply_markup=markup)
            return False
        except RequestError as e:
            logger.error(
                f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {event.from_user.id}")
            text, markup = e.to_user_message_with_markup()
            await event.answer(text, reply_markup=markup)
            return False
        except Exception as e:
            logger.exception(f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await event.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False

class CheckSubcategoryHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥-–∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        try:
            subcategories = context['subcategories']
            if len(subcategories) == 0:
                await event.message.edit_text(text='–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∏ –æ–¥–Ω–∞ –ø–æ–¥-–∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É',
                                              reply_markup=TransactionKeyboard().get_empty_category_menu_keyboard())
            else:
                await state.update_data(subcategories=subcategories)
                return await super().handle(event, state, context)

        except Exception as e:
            logger.exception(f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await event.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False

class ShowSubcategoriesHandler(BaseHandler):
    SUBCATEGORIES_PER_PAGE = 6
    async def handle(self, event, state: FSMContext, context: dict = None):
        try:
            logger.debug(f"[{self.__class__.__name__}] –ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–¥-–∫–∞—Ç–µ–≥–æ—Ä–∏–π")
            await state.set_state(TransactionState.waiting_for_transaction_subcategory)

            data = await state.get_data()
            categories = data.get("subcategories", [])
            index = data.get("subcategories_index", 0)

            # –°—á–∏—Ç–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            total_pages = math.ceil(len(categories) / self.SUBCATEGORIES_PER_PAGE)
            page = index % total_pages

            # –í—ã–±–∏—Ä–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            start = page * self.SUBCATEGORIES_PER_PAGE
            end = start + self.SUBCATEGORIES_PER_PAGE
            current_page_categories = categories[start:end]

            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await event.message.delete()
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = self._generate_keyboard(current_page_categories, total_pages, page)
            await event.message.answer("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥-–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)
            return True
        except Exception as e:
            logger.exception(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
            await event.message.answer("üö® –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")

    def _generate_keyboard(self, subcategories: list, total_pages: int, page: int):
        buttons = []
        row = []

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        for i, subcategory in enumerate(subcategories):
            btn = TransactionKeyboard.get_subcategory_button(text=subcategory['name'], id=i)
            row.append(btn)
            if len(row) == 2:
                buttons.append(row)
                row = []

        # –î–æ–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if row:
            while len(row) < 2:
                row.append(TransactionKeyboard.get_empty_category_button())
            buttons.append(row)

        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        buttons.append(TransactionKeyboard.get_subcategory_menu_subkeyboard(page, total_pages))

        return TransactionKeyboard.get_subcategory_menu_keyboard(buttons)


class RememberSubcategoryHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–¥-–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        try:
            data = await state.get_data()
            subcategories = data.get('subcategories')
            index = data.get("subcategories_index", 0)
            print(subcategories)
            print(len(subcategories))
            print(index)
            subcategory = subcategories[index]
            await state.update_data(subcategory=subcategory)
            return await super().handle(event, state, context)
        except Exception as e:
            logger.exception(f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∫—ç—à-–±–æ–∫—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await event.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False

class TakingTransactionInfoHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        try:
            await state.set_state(TransactionState.waiting_for_transaction_info)
            data = await state.get_data()
            # print(data)
            transaction_action = data.get('transaction_action').get('type')
            user_cashbox = data.get('user_cashboxes')
            category = data.get('category')
            subcategory = data.get('subcategory')
            new_user_transaction = data.get('new_user_transaction', {})

            if isinstance(event, aiogram.types.Message):
                if transaction_action == 'income':
                    await event.answer(
                        self._format_cashbox('income', user_cashbox, category, subcategory, new_user_transaction),
                        reply_markup=TransactionKeyboard.get_new_income_keyboard() if len(new_user_transaction.items()) != 4 else TransactionKeyboard.get_done_new_income_keyboard(), parse_mode='MarkdownV2')
                    return True
                elif transaction_action == 'expense':
                    await event.answer(self._format_cashbox('expense', user_cashbox, category, subcategory, new_user_transaction),
                                                  reply_markup=TransactionKeyboard.get_new_expense_keyboard() if len(new_user_transaction.items()) != 5 else TransactionKeyboard.get_new_done_expense_keyboard(),
                                                  parse_mode='MarkdownV2')
                    return True
                else:
                    pass

            if transaction_action=='income':
                await event.message.edit_text(self._format_cashbox('income', user_cashbox, category, subcategory, new_user_transaction),
                                   reply_markup=TransactionKeyboard.get_new_income_keyboard() if len(new_user_transaction.items()) != 4 else TransactionKeyboard.get_done_new_income_keyboard(), parse_mode='MarkdownV2')
                return True
            elif transaction_action=='expense':
                await event.message.edit_text(self._format_cashbox('expense', user_cashbox, category, subcategory, new_user_transaction),
                                              reply_markup=TransactionKeyboard.get_new_expense_keyboard() if len(new_user_transaction.items()) != 5 else TransactionKeyboard.get_new_done_expense_keyboard(), parse_mode='MarkdownV2')
                return True
            else:
                pass
        except Exception as e:
            logger.exception(
                f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º –∫—ç—à-–±–æ–∫—Å–µ: {e}")
            await event.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False

    def _format_cashbox(self, trans_type: str, user_cashbox: dict, category: dict, subcategory: dict, transaction_info: dict) -> str:
        cashbox = user_cashbox.get('cashbox')
        provider = cashbox.get('provider')
        type = cashbox.get('type')

        def esc(text):
            """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ MarkdownV2"""
            if not isinstance(text, str):
                text = str(text)
            return (
                text.replace('\\', '\\\\')
                .replace('.', '\\.')
                .replace('-', '\\-')
                .replace('(', '\\(')
                .replace(')', '\\)')
                .replace('[', '\\[')
                .replace(']', '\\]')
                .replace('{', '\\{')
                .replace('}', '\\}')
                .replace('!', '\\!')
                .replace('=', '\\=')
                .replace('+', '\\+')
                .replace('*', '\\*')
                .replace('_', '\\_')
                .replace('`', '\\`')
                .replace('>', '\\>')
                .replace('#', '\\#')
                .replace('|', '\\|')
                .replace('~', '\\~')
            )

        def generate_message(trans_type):
            if trans_type=='income':
                return (
                    f"–ú—ã —É–∂–µ –ø–æ—á—Ç–∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª–∏ –∑–∞–ø–∏—Å—å –æ –≤–∞—à–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏\\, –æ—Å—Ç–∞–ª–æ—Å—å –ª–∏—à—å –≤–Ω–µ—Å—Ç–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ\\!\n\n"
                    f"–í–∞—à–∞ –Ω–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è\\:\n\n"
                    f"‚úèÔ∏è *–¢–∏–ø:* –¥–æ—Ö–æ–¥\n"
                    f"üì¶ *–ö—ç—à\\-–±–æ–∫—Å:* {esc(cashbox.get('name'))} \\({esc(type.get('name'))}\\) –æ—Ç {esc(provider.get('name'))}\n"
                    f"üí∞ *–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞:* {esc(user_cashbox.get('balance'))} {esc(cashbox.get('currency'))}\n"
                    f"üí∞ *–í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è:* {esc(category.get('name'))}\n"
                    f"üí∞ *–í—ã–±—Ä–∞–Ω–Ω–∞—è –ø–æ–¥\\-–∫–∞—Ç–µ–≥–æ—Ä–∏—è:* {esc(subcategory.get('name'))}\n"
                    f"*–°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏*: {esc(transaction_info.get('amount', '‚Äî'))} {esc(cashbox.get('currency'))}\n"
                    f"*–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è*: {esc(transaction_info.get('datetime', '‚Äî'))}\n"
                    f"*–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π*: {esc(transaction_info.get('comment', '‚Äî'))}\n"
                    f"*–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–æ—Ö–æ–¥–∞*: {esc(transaction_info.get('source', '‚Äî'))}\n"
                )
            elif trans_type=='expense':
                return (
                    f"–ú—ã —É–∂–µ –ø–æ—á—Ç–∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª–∏ –∑–∞–ø–∏—Å—å –æ –≤–∞—à–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏\\, –æ—Å—Ç–∞–ª–æ—Å—å –ª–∏—à—å –≤–Ω–µ—Å—Ç–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ\\!\n\n"
                    f"–í–∞—à–∞ –Ω–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è\\:\n\n"
                    f"‚úèÔ∏è *–¢–∏–ø:* –¥–æ—Ö–æ–¥\n"
                    f"üì¶ *–ö—ç—à\\-–±–æ–∫—Å:* {esc(cashbox.get('name'))} \\({esc(type.get('name'))}\\) –æ—Ç {esc(provider.get('name'))}\n"
                    f"üí∞ *–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞:* {esc(user_cashbox.get('balance'))} {esc(cashbox.get('currency'))}\n"
                    f"üí∞ *–í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è:* {esc(category.get('name'))}\n"
                    f"üí∞ *–í—ã–±—Ä–∞–Ω–Ω–∞—è –ø–æ–¥\\-–∫–∞—Ç–µ–≥–æ—Ä–∏—è:* {esc(subcategory.get('name'))}\n"
                    f"*–°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏*: {esc(transaction_info.get('amount', '‚Äî'))} {esc(cashbox.get('currency'))}\n"
                    f"*–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è*: {esc(transaction_info.get('datetime', '‚Äî'))}\n"
                    f"*–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π*: {esc(transaction_info.get('comment', '‚Äî'))}\n"
                    f"*–ê–¥—Ä–µ—Å–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏*: {esc(transaction_info.get('vendor', '‚Äî'))}\n"
                    f"*–õ–æ–∫–∞—Ü–∏—è*: {esc(transaction_info.get('location', '‚Äî'))}\n"
                )
            else:
                pass


        return generate_message(trans_type)


class WaitTransactionFieldHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –û–∂–∏–¥–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        try:
            data = await state.get_data()
            field = data.get('get_transaction_field')
            if field == 'amount':
                await state.set_state(TransactionState.waiting_for_amount)
                await event.message.edit_text(f'–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏!\n–ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã, —Ç.–∫. –æ—Å–Ω–æ–≤–Ω–∞—è –≤–∞–ª—é—Ç–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞–º–∏ –∫—ç—à-–±–æ–∫—Å–∞ - {data.get("user_cashboxes").get("cashbox").get("currency")}')
                return True
            elif field == 'comment':
                await state.set_state(TransactionState.waiting_for_comment)
                await event.message.edit_text(f'–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.')
                return True
            elif field == 'datetime':
                await state.set_state(TransactionState.waiting_for_datetime)
                await event.message.edit_text(f'–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.\n–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: –î–î.–ú–ú.–ì–ì–ì–ì\n–§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: –ß–ß:–ú–ú (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è - —É—Å—Ç–∞–Ω–æ–≤–∏–º –≤—Ä–µ–º—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–∞–º–∏)\n–§–æ—Ä–º–∞—Ç –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß.–ú–ú')
                return True
            elif field == 'source':
                await state.set_state(TransactionState.waiting_for_source)
                await event.message.edit_text(f'–í–≤–µ–¥–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏')
                return True
            elif field == 'location':
                await state.set_state(TransactionState.waiting_for_location)
                await event.message.edit_text(f'–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, –≥–¥–µ –±—ã–ª–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è (–Ω–∞ –≤–∞—à–µ —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ).')
                return True
            elif field == 'vendor':
                await state.set_state(TransactionState.waiting_for_vendor)
                await event.message.edit_text(f'–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å–∞—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏')
                return True
            else:
                Exception('–ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–æ–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞')

        except Exception as e:
            logger.exception(
                f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º –∫—ç—à-–±–æ–∫—Å–µ: {e}")
            await event.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False

class TakingTransactionFieldHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –ø–æ–ª–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        try:
            data = await state.get_data()
            get_transaction_field = data.get('get_transaction_field')
            from app.utils.profile import ValidateUserInput
            field = event.text.strip()
            success, ref = ValidateUserInput().validate_field(type=get_transaction_field, field=field)
            if not success:
                logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞")
                raise ref
            data = await state.get_data()
            new_user_transaction = data.get('new_user_transaction', {})
            new_user_transaction[f'{get_transaction_field}'] = ref
            await state.update_data(new_user_transaction=new_user_transaction)
            return await super().handle(event, state, context)

        except Exception as e:
            logger.exception(
                f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º –∫—ç—à-–±–æ–∫—Å–µ: {e}")
            await event.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False


class CheckTransactionInfoHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        try:
            data = await state.get_data()
            transaction_type = data.get('transaction_action').get('type')
            new_user_transaction = data.get('new_user_transaction')
            if (len(new_user_transaction.items()) == 4 and transaction_type == 'income') or (len(new_user_transaction.items()) == 5 and transaction_type == 'expense'):
                return await super().handle(event, state, context)
            else:
                return Exception("–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏")

        except Exception as e:
            logger.exception(
                f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º –∫—ç—à-–±–æ–∫—Å–µ: {e}")
            await event.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False

class MakeTransactionDataHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –°–æ–∑–¥–∞–Ω–∏–µ json`–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞")
        try:
            data = await state.get_data()
            transaction_type = data.get('transaction_action').get('type')
            user_cashbox = data.get('user_cashboxes')
            category = data.get('category')
            subcategory = data.get('subcategory')
            new_user_transaction = data.get('new_user_transaction', {})

            if context is None:
                context = {}

            if transaction_type == 'income':
                context['json'] = {
                  "user_cashbox_id": user_cashbox.get('id'),
                  "category_id": category.get('id'),
                  "subcategory_id": subcategory.get('id'),
                  "amount": new_user_transaction.get('amount'),
                  "comment": new_user_transaction.get('comment'),
                  "transacted_at": new_user_transaction.get('datetime'),
                  "source": new_user_transaction.get('source'),
                }
                return await super().handle(event, state, context)
            elif transaction_type == 'expense':
                context['json'] = {
                  "user_cashbox_id": user_cashbox.get('id'),
                  "category_id": category.get('id'),
                  "subcategory_id": subcategory.get('id'),
                  "amount": new_user_transaction.get('amount'),
                  "comment": new_user_transaction.get('comment'),
                  "transacted_at": new_user_transaction.get('datetime'),
                  "vendor": new_user_transaction.get('vendor'),
                  "location": new_user_transaction.get('location')
                }
                return await super().handle(event, state, context)
            else:
                return Exception("–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏")

        except Exception as e:
            logger.exception(
                f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º –∫—ç—à-–±–æ–∫—Å–µ: {e}")
            await event.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False


class SaveNewTransactionHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(
            f"[{self.__class__.__name__}] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫—ç—à-–±–æ–∫—Å–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        try:
            data = await state.get_data()
            request_manager = RequestManager()
            data = await request_manager.make_request(method='POST', url=f'transactions/{data.get("transaction_action").get("type")}', state=state, json=context['json'])
            if context is None:
                context = {}
            context['transaction'] = data
            return await super().handle(event, state, context)
        except TokenStorageError as e:
            logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ç–æ–∫–µ–Ω–∞–º–∏: {event.from_user.id}")
            text, markup = e.to_user_message_with_markup()
            await event.answer(text, reply_markup=markup)
            return False
        except RequestError as e:
            logger.error(
                f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {event.from_user.id}")
            text, markup = e.to_user_message_with_markup()
            await event.answer(text, reply_markup=markup)
            return False
        except Exception as e:
            logger.exception(f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await event.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False

class NotifySuccessesTransactionHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(
            f"[{self.__class__.__name__}] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—Ö–µ {event.from_user.id}")
        try:
            event.message.edit_text('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!', reply_markup=TransactionKeyboard.get_back_transaction_menu_keyboard())
            return await super().handle(event, state, context)
        except Exception as e:
            logger.exception(f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await event.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False

class GetUserLatestTransactionInfoHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ–± –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö {event.from_user.id}")
        try:
            data = await state.get_data()
            request_manager = RequestManager()
            data = await request_manager.make_request(method='GET', url=f'transactions/{data.get("transaction_action").get("type")}?page=1&per_page=10&sort_by=id&sort_dir=desc', state=state)
            if context is None:
                context = {}
            context['transactions'] = data
            return await super().handle(event, state, context)
        except TokenStorageError as e:
            logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ç–æ–∫–µ–Ω–∞–º–∏: {event.from_user.id}")
            text, markup = e.to_user_message_with_markup()
            await event.answer(text, reply_markup=markup)
            return False
        except RequestError as e:
            logger.error(
                f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {event.from_user.id}")
            text, markup = e.to_user_message_with_markup()
            await event.answer(text, reply_markup=markup)
            return False
        except Exception as e:
            logger.exception(f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await event.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False

class CheckUserLatestTransactionsInfoHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ–± –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö {event.from_user.id}")
        try:
            if len(context['transactions']) == 0:
                event.message.edit_text(text='–ö–∞–∂–µ—Ç—Å—è, —É –≤–∞—Å –ø–æ–∫–∞ –µ—â—ë –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∞–Ω–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü. –°–∞–º–æ–µ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∞—Ç—å –∏—Ö!', reply_markup=TransactionKeyboard.def_get_history_menu_keyboard())
            else:
                return await super().handle(event, state, context)
        except Exception as e:
            logger.exception(f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await event.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False

class ShowUserLatestTransactionInfoHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        try:
            await event.message.edit_text(f"üìä –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–æ—Ö–æ–¥–æ–≤:\n\n{(self._format_history(context['transactions']))}", parse_mode="HTML", reply_markup=TransactionKeyboard.def_get_history_menu_keyboard())
            return True
        except Exception as e:
            logger.exception(f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∫—ç—à-–±–æ–∫—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await event.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False

    def _format_history(self, transactions: dict) -> str:
        lines = []
        print(transactions)
        for t in transactions['items']:
            lines.append(
                f"üßæ ID: {t['id']}\n"
                f"üè¶ –ö—ç—à-–±–æ–∫—Å: {t['user_cashbox']['cashbox']['name']}\n"
                f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {t['category']['name']}\n"
                f"üìÅ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {t['subcategory']['name']}\n"
                f"üìÖ –î–∞—Ç–∞: {t['transacted_at'][:10]}\n"
                f"üí∞ –°—É–º–º–∞: {t['amount']} {t['user_cashbox']['cashbox']['currency']}\n"
                f"|----------|----------|----------|\n"
            )
        return "\n".join(lines)

class GetUserTransactionStatisticHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        try:
            data = await state.get_data()
            request_manager = RequestManager()
            data = await request_manager.make_request(method='GET', url=f'transactions/statistics?type={data.get("transaction_action").get("type")}&include_empty_categories=False', state=state)
            if context is None:
                context = {}
            context['statistic'] = data
            return await super().handle(event, state, context)
        except TokenStorageError as e:
            logger.error(f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ç–æ–∫–µ–Ω–∞–º–∏: {event.from_user.id}")
            text, markup = e.to_user_message_with_markup()
            await event.answer(text, reply_markup=markup)
            return False
        except RequestError as e:
            logger.error(
                f"[{self.__class__.__name__}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {event.from_user.id}")
            text, markup = e.to_user_message_with_markup()
            await event.answer(text, reply_markup=markup)
            return False
        except Exception as e:
            logger.exception(f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await event.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False

class CheckUserTransactionStatisticHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        try:
            if len(context['statistic']) == 0:
                event.message.edit_text(text='–ö–∞–∂–µ—Ç—Å—è, —É –≤–∞—Å –ø–æ–∫–∞ –µ—â—ë –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∞–Ω–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü. –°–∞–º–æ–µ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∞—Ç—å –∏—Ö!', reply_markup=TransactionKeyboard.def_get_history_menu_keyboard())
            else:
                return await super().handle(event, state, context)
        except Exception as e:
            logger.exception(f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await event.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False

class ShowUserTransactionStatisticHandler(BaseHandler):
    async def handle(self, event, state: FSMContext, context: dict = None):
        logger.debug(f"[{self.__class__.__name__}] –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {event.from_user.id}")
        try:
            print(context['statistic'])
            await event.message.edit_text(f"{(self._format_stat(context['statistic']))}", parse_mode="HTML", reply_markup=TransactionKeyboard.get_statistic_menu_keyboard())
            return True
        except Exception as e:
            logger.exception(f"[{self.__class__.__name__}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∫—ç—à-–±–æ–∫—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await event.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ–∑–∂–µ.")
            return False

    def _format_stat(self, transactions: dict) -> str:
        lines = ["üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π</b>\n"]

        # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for category_name, category_data in transactions['statistics'].items():
            total = transactions['category_totals'].get(category_name, 0)
            lines.append(f"üìÇ <b>{category_name}</b>: {round(total, 2)}‚ÇΩ")

            # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            providers = category_data.get('data', {})
            for provider_name, provider_data in providers.items():
                amount = provider_data.get('sum', 0)
                currency = provider_data.get('currency', 0)
                if amount > 0:
                    lines.append(f"    ‚îî üè¶ {provider_name}: {round(amount, 2)} {currency}")

            lines.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏

        # –ò—Ç–æ–≥–∏ –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º
        lines.append("<b>üíº –ò—Ç–æ–≥–∏ –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º:</b>")
        for provider_name, amount in transactions.get('provider_totals', {}).items():
            lines.append(f"üè¶ {provider_name}: {round(amount, 2)}")

        return "\n".join(lines)
