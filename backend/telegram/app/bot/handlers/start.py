from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from app.bot.keyboards.start import get_start_keyboard
from app.bot.states import AuthState
from app.utils.auth import TelegramAuthError, TelegramLoginNotFound, TelegramRegisterConflict
from app.utils.auth import telegram_auth, link_telegram
from app.config import API_BASE_URL, SECRET_TELEGRAM_AUTH_KEY

router = Router()

@router.message(F.text == "/start")
async def start_handler(message: Message, state: FSMContext):
    keyboard = get_start_keyboard()

    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:",
        reply_markup=keyboard
    )

@router.callback_query(F.data == "auth_login")
async def handle_login(callback: CallbackQuery, state: FSMContext):
    try:
        data, _ = await telegram_auth(tg_id=callback.from_user.id, tg_username=callback.from_user.username, mode="login")
    except TelegramLoginNotFound:
        await callback.message.edit_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
        return
    except TelegramAuthError:
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        return

    await state.set_state(AuthState.authenticated)
    await state.update_data(
        access_token=data["access_token"],
        refresh_token=data["refresh_token"],
        user_id=data["user"]["id"]
    )
    await callback.message.edit_text("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!")


@router.callback_query(F.data == "auth_register")
async def handle_register(callback: CallbackQuery, state: FSMContext):
    try:
        data, _ = await telegram_auth(tg_id=callback.from_user.id, tg_username=callback.from_user.username, mode="register")
    except TelegramRegisterConflict:
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —É–∂–µ –µ—Å—Ç—å –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return
    except TelegramAuthError:
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        return

    await state.set_state(AuthState.authenticated)
    await state.update_data(
        access_token=data["access_token"],
        refresh_token=data["refresh_token"],
        user_id=data["user"]["id"]
    )
    await callback.message.edit_text("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!")


@router.callback_query(F.data == "auth_link_telegram")
async def handle_link(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AuthState.waiting_for_email)
    await callback.message.edit_text("üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email (example@gmail.com):")


@router.message(AuthState.waiting_for_email)
async def handle_email(message: Message, state: FSMContext):
    email = message.text.strip()
    if "@" not in email or "." not in email:
        await message.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return

    await state.update_data(email=email)
    await state.set_state(AuthState.waiting_for_password)
    await message.answer("üîê –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å (password1!):")


@router.message(AuthState.waiting_for_password)
async def handle_password(message: Message, state: FSMContext):
    password = message.text.strip()
    data = await state.get_data()
    email = data.get("email")

    try:
        auth_data, _ = await telegram_auth(tg_id=0, tg_username='1', mode="auth_link_telegram", to_link={ "email": email, "password": password, 'remember_me': True})
    except TelegramAuthError:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å.")
        return

    try:
        user_data, _ = await link_telegram(tg_id=message.from_user.id,
                                           tg_username = message.from_user.username or "",
                                           access_token=auth_data['access_token'])
    except TelegramAuthError:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∏ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–∏—Å—Ç–µ–º—ã –∏ —Ç–µ–ª–µ–≥—Ä–∞–º–º-–∞–∫–∫–∞—É–Ω—Ç–æ–º.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã –∏ ID
    await state.set_state(AuthState.authenticated)
    await state.update_data(
        access_token=auth_data["access_token"],
        refresh_token=auth_data["refresh_token"],
        user_id=user_data['user']['id']
    )

    await message.answer("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ –ø—Ä–∏–≤—è–∑–∫–∞ Telegram!")
