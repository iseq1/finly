import aiogram
from app.bot.keyboards.start import StartKeyboard

class RequestError(Exception):
    """–ë–∞–∑–æ–≤–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ —Å–µ—Ä–≤–µ—Ä—É."""
    def __init__(self, message: str = "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É", code: int = None):
        self.message = message
        self.code = code
        super().__init__(message)

    def to_user_message(self) -> str:
        """–°–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
        return "‚ùó –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    def to_user_message_with_markup(self) -> tuple[str, aiogram.types.InlineKeyboardMarkup | None]:
        return self.to_user_message(), None


class RequestUnauthorizedError(RequestError):
    def __init__(self):
        super().__init__("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.", code=401)

    def to_user_message(self) -> str:
        return "üîí –í–∞—à–∞ —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∑–∞–Ω–æ–≤–æ."

    def to_user_message_with_markup(self):
        text = self.to_user_message()
        keyboard = StartKeyboard().get_login_keyboard()
        return text, keyboard


class RequestServerUnavailableError(RequestError):
    def __init__(self):
        super().__init__("–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", code=503)

    def to_user_message(self) -> str:
        return "üåê –°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."


class RequestUnexpectedError(RequestError):
    def __init__(self):
        super().__init__("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.", code=520)

    def to_user_message(self) -> str:
        return "‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."


class RequestStatusCodeError(RequestError):
    def __init__(self, message: str = "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞", code: int = None):
        super().__init__(message=message, code=code)

    def to_user_message(self) -> str:
        return f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ ({self.code}). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."


class RequestBadRequestError(RequestStatusCodeError):
    def __init__(self):
        super().__init__("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å", code=400)

    def to_user_message(self) -> str:
        return "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."


class RequestForbiddenError(RequestStatusCodeError):
    def __init__(self):
        super().__init__("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", code=403)

    def to_user_message(self) -> str:
        return "üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è."


class RequestNotFoundError(RequestStatusCodeError):
    def __init__(self):
        super().__init__("–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", code=404)

    def to_user_message(self) -> str:
        return "üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π —Ä–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω."


class RequestConflictError(RequestStatusCodeError):
    def __init__(self):
        super().__init__("–ö–æ–Ω—Ñ–ª–∏–∫—Ç –¥–∞–Ω–Ω—ã—Ö", code=409)

    def to_user_message(self) -> str:
        return "‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."


class RequestTooManyRequestsError(RequestStatusCodeError):
    def __init__(self):
        super().__init__("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤", code=429)

    def to_user_message(self) -> str:
        return "‚è≥ –í—ã –¥–µ–ª–∞–µ—Ç–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."


class TokenStorageError(RequestError):
    def __init__(self):
        super().__init__("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–æ–∫–µ–Ω—ã –¥–æ—Å—Ç—É–ø–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.", code=404)

    def to_user_message(self) -> str:
        return "üîí –í–∞—à–∞ —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∑–∞–Ω–æ–≤–æ."

    def to_user_message_with_markup(self):
        text = self.to_user_message()
        keyboard = StartKeyboard().get_login_keyboard()
        return text, keyboard